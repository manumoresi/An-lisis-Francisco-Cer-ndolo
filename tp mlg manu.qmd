---
title: "TP MLG"
format: html
editor: visual
---

# Trabajo Práctico MLG

## Introducción

El tenis es uno de los deportes más populares del mundo, jugado por millones de personas a lo largo de todo el planeta, y se caracteriza por la destreza técnica, el esfuerzo físico y el análisis estratégico que requiere.

A nivel profesional, el circuito mas prestigioso es el de la ATP (Association of Tennis Professionals), en donde estan los jugadores mas prestigiosos del planeta, compitiendo en diferentes torneos de diferentes categorías y superficies (polvo de ladrillo, cesped y canchas duras). En este circuito existe un ranking de jugadores, el cual los ubica segun sus resultados en el año, y se actualiza cada semana, siendo la posicion nº 1 el mejor tenista de la actualidad.

Argentina ha producido una gran cantidad de tenistas destacados a lo largo de los años, y uno de los más prometedores de la actualidad es Francisco Cerúndolo. Nacido el 13 de agosto de 1998 en Buenos Aires, Cerúndolo ha ascendido rápidamente en el ranking ATP gracias a su consistencia, habilidades técnicas y mentalidad competitiva. Su estilo de juego, caracterizado por un potente golpe de derecha y su movilidad en la cancha, lo ha ayudado a destacarse en torneos importantes, especialmente en superficies de polvo de ladrillo, donde ha tenido varios de sus mejores desempeños.

Cerúndolo ha logrado consolidarse entre los mejores tenistas argentinos de la nueva generación, mostrando gran potencial tanto en torneos nacionales como internacionales. En 2021, dio un gran paso al alcanzar la final del ATP de Buenos Aires, un logro que le permitió ingresar a la élite del tenis mundial. A lo largo de su carrera, ha demostrado tener una gran capacidad para adaptarse a distintas situaciones de juego, enfrentando a rivales de alto nivel y obteniendo victorias clave que han acelerado su progreso en el circuito, las cuales incluyen 3 titúlos ATP, en Bastad 2022, Eastbourne 2023 y Umag 2024.

En este informe, se va a trabajar con una base de datos de 146 partidos, todos los partidos de la carrera de Fran desde su debut en 2020 hasta mayo del 2024 (no icluye el mencionado titulo en Umag de ese año) y cuenta con las siguientes variables:

surface tourney_level winner_name loser_name best_of round minutes fran_win opp_hand opp_age opp_ht opp_rank fran_rank dif_rank fran_age pct_fran_1stIn pct_opp_1stIn pct_fran_1stWon pct_opp_1stWon pct_fran_2ndWon pct_opp_2ndWon pct_fran_df pct_opp_df pct_fran_ace pct_opp_ace pct_fran_bp_saved pct_opp_bp_saved pct_fran_bp_wins pct_opp_bp_wins

## Objetivos

El objetivo de este trabajo es modelar la probabilidad de que Cerúndolo gane o no un partido en el circuito, basandose en algunas de las variables ya mencionadas. El análisis de estos factores no solo permite entender mejor los resultados, sino que también ayuda a prever cómo podría desenvolverse en futuros encuentros, lo que es útil tanto para entrenadores como para analistas deportivos.

En resumen, Francisco Cerúndolo es una figura clave en el tenis argentino actual, y su evolución en el circuito profesional será de gran interés para quienes siguen el deporte, y lo que se buscará en este informe es detallar las claves en esta evolución.

## Análisis descriptivo

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
library(readxl)
library(DataExplorer)
library(kableExtra)
library(tidyverse)
library(plotly)
library(glmtoolbox)
library(statmod)

cerundolo_final1 <- read_excel("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/cerundolo_final1.xlsx")

cerundolo_final1 = subset(cerundolo_final1, select = -c(tourney_id,tourney_name,draw_size,tourney_date,match_num,winner_id,winner_seed,winner_entry,winner_ioc,loser_id,loser_seed,loser_entry,loser_ioc,score,winner_rank_points,loser_rank_points,w_SvGms,l_SvGms))

cerundolo_final1$fran_win = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",1,0)

#Creamos variables de interes en base a variables con las que contabamos

cerundolo_final1$opp_hand = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_hand,cerundolo_final1$winner_hand)
cerundolo_final1$opp_ht = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_ht,cerundolo_final1$winner_ht)
cerundolo_final1$opp_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_age,cerundolo_final1$winner_age)
cerundolo_final1$opp_rank = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_rank,cerundolo_final1$winner_rank)
cerundolo_final1$fran_rank = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$winner_rank,cerundolo_final1$loser_rank)
cerundolo_final1$dif_rank = cerundolo_final1$fran_rank - cerundolo_final1$opp_rank
cerundolo_final1$fran_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$winner_age,cerundolo_final1$loser_age)
cerundolo_final1$opp_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_age,cerundolo_final1$winner_age)

#Planteamos las estadísticas del partido para fran y los oponentes

cerundolo_final1$fran_ace = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_ace,cerundolo_final1$l_ace)
cerundolo_final1$opp_ace = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_ace,cerundolo_final1$w_ace)
cerundolo_final1$fran_df = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_df,cerundolo_final1$l_df)
cerundolo_final1$opp_df = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_df,cerundolo_final1$w_df)
cerundolo_final1$fran_svpt = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_svpt,cerundolo_final1$l_svpt)
cerundolo_final1$opp_svpt = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_svpt,cerundolo_final1$w_svpt)
cerundolo_final1$fran_1stIn = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_1stIn,cerundolo_final1$l_1stIn)
cerundolo_final1$opp_1stIn = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_1stIn,cerundolo_final1$w_1stIn)
cerundolo_final1$fran_1stWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_1stWon,cerundolo_final1$l_1stWon)
cerundolo_final1$opp_1stWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_1stWon,cerundolo_final1$w_1stWon)
cerundolo_final1$fran_2ndWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_2ndWon,cerundolo_final1$l_2ndWon)
cerundolo_final1$opp_2ndWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_2ndWon,cerundolo_final1$w_2ndWon)
cerundolo_final1$fran_bpSaved = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_bpSaved,cerundolo_final1$l_bpSaved)
cerundolo_final1$opp_bpSaved = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_bpSaved,cerundolo_final1$w_bpSaved)
cerundolo_final1$fran_bpFaced = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_bpFaced,cerundolo_final1$l_bpFaced)
cerundolo_final1$opp_bpFaced = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_bpFaced,cerundolo_final1$w_bpFaced)

#borramos las variables de winner y loser

cerundolo_final1 = subset(cerundolo_final1, select = -c(winner_hand,winner_ht,winner_age,winner_rank,loser_rank,loser_hand,loser_ht,loser_age,w_ace,w_df,w_svpt,w_1stIn,w_1stWon,w_2ndWon,w_bpSaved,w_bpFaced,l_ace,l_df,l_svpt,l_1stIn,l_1stWon,l_2ndWon,l_bpSaved,l_bpFaced))

#Realizamos la transformacion de las variables: cant de servicios, cantidad de primeros servicios
#en juego, cant de juegos de primer servicio ganados, cant de juegos de segundo servicio ganados,
#cant de break points y cant de aces.

#Porcentaje de primeros servicios
cerundolo_final1$pct_fran_1stIn= (cerundolo_final1$fran_1stIn/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_1stIn= (cerundolo_final1$opp_1stIn/cerundolo_final1$opp_svpt)
#Porcentaje de primeros servicios ganados
cerundolo_final1$pct_fran_1stWon= (cerundolo_final1$fran_1stWon/cerundolo_final1$fran_1stIn)
cerundolo_final1$pct_opp_1stWon= (cerundolo_final1$opp_1stWon/cerundolo_final1$opp_1stIn)

#Porcentaje de segundos servicios

cerundolo_final1$pct_fran_2ndWon= (cerundolo_final1$fran_2ndWon/(cerundolo_final1$fran_svpt-cerundolo_final1$fran_1stIn))
cerundolo_final1$pct_opp_2ndWon= (cerundolo_final1$opp_2ndWon/(cerundolo_final1$opp_svpt-cerundolo_final1$opp_1stIn))

#Ver si trabajamos con los aces o dobles faltas

#dobles faltas
cerundolo_final1$pct_fran_df= (cerundolo_final1$fran_df/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_df= (cerundolo_final1$opp_df/cerundolo_final1$opp_svpt)
#aces
cerundolo_final1$pct_fran_ace= (cerundolo_final1$fran_ace/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_ace= (cerundolo_final1$opp_ace/cerundolo_final1$opp_svpt)

#break points convertidos

cerundolo_final1$pct_fran_bp_wins=((cerundolo_final1$opp_bpFaced-cerundolo_final1$opp_bpSaved)/cerundolo_final1$opp_bpFaced)

cerundolo_final1$pct_opp_bp_wins=((cerundolo_final1$fran_bpFaced-cerundolo_final1$fran_bpSaved)/cerundolo_final1$fran_bpFaced)

#break points salvados
cerundolo_final1$pct_fran_bp_saved = 1 - cerundolo_final1$pct_opp_bp_wins
cerundolo_final1$pct_opp_bp_saved = 1 - cerundolo_final1$pct_fran_bp_wins

#imputamos los valores de la mano habil de los q faltaban

cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Aleksandar Kovacevic"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Vilius Gaubas"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Manuel Guinard"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$winner_name == "Ryan Peniston"] <- "L"


```

presentar algo de la proporcion de victorias

```{r, echo=FALSE, warning=FALSE, fig.align='center'}

porc_victorias = data.frame(resultado= c("Perdió","Ganó"),
                            porcentaje= c(47.68,52.31))

porc_victorias$ypos <- cumsum(porc_victorias$porcentaje) - 0.5 * porc_victorias$porcentaje

# Crear el gráfico de dona
ggplot(porc_victorias, aes(x = 2, y = porcentaje, fill = resultado)) +
  geom_bar(stat = "identity", width = 1, color = "white") +  # Gráfico de barras (de pastel)
  coord_polar(theta = "y", start = 0) +   # Convertir en gráfico circular
  geom_text(aes(y = ypos, label = paste0(porcentaje, "%")), color = "white") +  
  xlim(0.1, 2.5) + # Crear el agujero en el centro
  theme_void() + 
  labs(fill = "Resultado") +  
  ggtitle("Porcentaje de victorias")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))+
  theme(plot.title = element_text(hjust = 0.5))

```

Se puede observar que Fran ganó el 52.31% de sus partidos a lo largo de su carrera, lo cual es un gran desempeño para un jugador en sus primeros años en el circuito.

grafico de barras para la superficie

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
cerundolo_final1$fran_win = factor(cerundolo_final1$fran_win,levels = c(1,0),labels = c("Ganó","Perdió"))

g = ggplot(cerundolo_final1, aes(x = surface,fill = surface)) +
  geom_bar() + 
  ggtitle("Partidos según la superficie ")+
  xlab("Superficie")+
  ylab("Frecuencia")+
  theme(plot.title = element_text(hjust = 0.5))+
  scale_fill_manual(values = c("Clay"="sienna2","Grass"="palegreen3","Hard"="royalblue3"))+
  facet_wrap(~fran_win)+
  theme_minimal()+
  theme(legend.position = "none")+
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(g)

```

Se puede apreciar que la mayor cantidad de partidos los jugó en polvo de ladrillo, algo común en jugadores argentinos, y muy pocos partidos en cesped, ya que es la superficie con menos torneos en el circuito. En cuanto a cantidad de victorias, se ve que la superficie que mas ganó fue en polvo de ladrillo.

```{r, echo=FALSE, warning=FALSE}
tabla_s=table(cerundolo_final1$surface, cerundolo_final1$fran_win)
tabla_prop= prop.table(tabla_s,margin = 1)
tabla1=kable(round(tabla_prop,2), caption = "Tabla 1: Proporción de victorias según superficie")%>% 
  kable_styling(position = "center",full_width = FALSE) %>% 
  row_spec(0, bold = T, background = "steelblue1", color = "black")%>% 
  row_spec(1, bold = F, background = "sienna2", color = "black")%>% 
  row_spec(2, bold = F, background = "palegreen3", color = "black")%>% 
  row_spec(3, bold = F, background = "royalblue3", color = "black")
tabla1
```

Y en la Tabla 1, se ve que tanto en polvo de ladrillo como en cesped tiene un record positivo (más victorias que derrotas), en cambio en canchas duras posee un record negativo.

tabla para los partidos en diferentes rondas

```{r, echo=FALSE, warning=FALSE}
cerundolo_final1$round = factor(cerundolo_final1$round,levels = c("RR","R128","R64","R32","R16","QF","SF","F"))

tabla = table(cerundolo_final1$round, cerundolo_final1$fran_win)

tabla2 = kable(tabla, caption = "Tabla 2: Partidos según ronda") %>% kable_styling(position = "center",full_width = F) %>% row_spec(0, bold = T, background = "steelblue1", color = "black") 
tabla2
```

En la Tabla 1, se puede ver que tiene un record equilibrado en cada una de las rondas que se juegan dentro de los diferentes torneos del circuito, destacando su record de 2 ganados y 2 perdidos en finales, y asi obteniendo sus únicos 2 titulos ATP hasta el momento. Se puede sospechar que la ronda en la cual juegue Frank, no parece influir en la probablidad de conseguir una victoria.

mano habil partidos q gano y q perdio

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
library(vcd)
library(plotly)
g1=mosaic(
  formula = ~ fran_win + opp_hand, 
  data = cerundolo_final1, 
  direction = "v",
  highlighting = "opp_hand", 
  highlighting_fill = c("steelblue1","steelblue4"),
  labeling = labeling_border, 
       labeling_args = list(gp_labels = gpar(col = "black", fontsize = 12),  
                            gp_varnames = gpar(col = "white", fontsize = 14)), 
       main = "Resultados según la mano habil del rival")


tabla_cruzada <- table(cerundolo_final1$fran_win, cerundolo_final1$opp_hand)
prop_conjunta <- prop.table(tabla_cruzada)
prop_cond_opp_hand <- prop.table(tabla_cruzada, margin = 2)
tabla_cruzada
prop_cond_opp_hand
```

ver como agregar las proporciones de victoria segun la mano del oponente

Vemos que la mayor cantidad de jugadores en el circuito son derechos, por lo que se observa que la mayor cantidad de rivales de fran son derechos, mientras que vemos que la proporcion de victorias y derrotas es similar tanto para jugadores diestros como para los zurdos. Lo cual nos da indicios de que esta variable no parecería influir en la respuesta

altura y edad

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
# Calcular las medias
medias_edad <- aggregate(opp_age ~ fran_win, data = cerundolo_final1, FUN = mean)
medias_edad

library(ggridges)
ggplot(cerundolo_final1) +
  aes(y = fran_win, x = opp_age, fill = fran_win) +
  geom_density_ridges() +
  labs(x = "Edad del rival (años)", y = "Resultado") +
  theme_ridges() + 
  theme(legend.position = "none") +
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))
```

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
library(ggridges)
medias_altura <- aggregate(opp_ht ~ fran_win, data = cerundolo_final1, FUN = mean)
medias_altura
ggplot(cerundolo_final1) +
  aes(y = fran_win, x = opp_ht, fill = fran_win) +
  geom_density_ridges() +
  labs(x = "Altura del rival (cm)", y = "Resultado") +
  theme_ridges() + 
  theme(legend.position = "none")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))
```

Tanto la edad como la altura del rival no parecen ser muy influyentes a la hora de evidenciar la posibilidad de un resultado. Ver si se puede agregar una linea punteada que indique la media, o ver si se puede hacer interactivo

boxplot de las diferentes duraciones de los partidos

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
ggplot(cerundolo_final1) +
  aes(y = minutes, x = fran_win, fill = fran_win) +
  geom_boxplot() +
  labs(x = "Resultado", y = "Duración del partido (min)") +
  theme(legend.position = "none")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))
```

Al observar las distribuciones en la duracion de los partidos que gano y que perdio, parecen no diferir demasiado, por lo que podria no ser un factor influyente en la probabilidad de ganar un partido.

ranking del oponente

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
g1=ggplot(cerundolo_final1) +
  aes(x = opp_rank, fill = fran_win) +
  geom_histogram(bins = 10) +
  labs(x = "Ranking del opponente", y = "Frecuencia") +
  theme(legend.position = "none")+
  facet_wrap(~fran_win)+
  # Punto en el valor 61 para el gráfico de la izquierda
  geom_point(data = subset(cerundolo_final1, fran_win == levels(cerundolo_final1$fran_win)[1]), 
             aes(x = 61, y = 0), color = "blue", size = 3) +
  # Punto en el valor 36 para el gráfico de la derecha
  geom_point(data = subset(cerundolo_final1, fran_win == levels(cerundolo_final1$fran_win)[2]), 
             aes(x = 36, y = 0), color = "blue", size = 3)+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))

ggplotly(g1)

```

Se observan distribuciones en los rankings de los oponentes de Fran asimetricas a la derecha, tanto si gana como si pierde. Esto es debido a que en pocas competiciones (por ejemplo Copa Davis o Grand Slams) participan jugadores de menor categoria, pero la gran mayoria de los jugadores del circuito se encuentran dentro del top 150 del ranking.

La mediana del ranking de los oponentes cuando Fran gana es de 61, mientras que cuando pierde de 36, lo que muestra que el ranking podria ser decisivo a la hora de analizar la probabilidad de ganar un partido.

nivel del torneo

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
ggplot(cerundolo_final1) +
  aes(x = fran_win, fill = tourney_level) +
  geom_bar(position = "dodge") +
  labs(x = "Resultado", y = "Frecuencia", fill = "Nivel del torneo") +
  scale_fill_manual(values = c("A"="darkslategray3", "D"="seagreen", "G"="indianred2", "M"="goldenrod2"),labels = c("ATP 250 y ATP 500", "Copa Davis", "Grand Slam","Masters 1000"))



```
Parece no influir el nivel del torneo

dos tablas para cuando gano y perdio para ver las estadisticas del juego

```{r, echo=FALSE, warning=FALSE}
m1=mean(cerundolo_final1$pct_fran_1stIn)
m2=mean(cerundolo_final1$pct_opp_1stIn)
m3=mean(cerundolo_final1$pct_fran_1stWon)
m4=mean(cerundolo_final1$pct_opp_1stWon)
m5=mean(cerundolo_final1$pct_fran_2ndWon)
m6=mean(cerundolo_final1$pct_opp_2ndWon)
m7=mean(cerundolo_final1$pct_fran_df)
m8=mean(cerundolo_final1$pct_opp_df)
m9=mean(cerundolo_final1$pct_fran_ace)
m10=mean(cerundolo_final1$pct_opp_ace)
m11=mean(cerundolo_final1$pct_fran_bp_saved)
m12=mean(cerundolo_final1$pct_opp_bp_saved)
m13=mean(cerundolo_final1$pct_fran_bp_wins)
m14=mean(cerundolo_final1$pct_opp_bp_wins)

```

### Modelo Estadístico

#### Selección de variables

Dejamos solo las variables de interes

```{r, echo=FALSE, warning=FALSE, results='hide'}
cerundolo_modelo= subset(cerundolo_final1, select= c(surface,tourney_level,minutes,fran_win,opp_hand,opp_ht,opp_age,dif_rank,pct_fran_1stIn,pct_opp_1stIn,pct_fran_1stWon,pct_opp_1stWon,pct_fran_2ndWon,pct_opp_2ndWon,pct_fran_df,pct_opp_df,pct_fran_ace,pct_opp_ace,pct_fran_bp_wins,pct_opp_bp_wins,pct_fran_bp_saved,pct_opp_bp_saved))

cerundolo_modelo = na.omit(cerundolo_modelo)
```

Planteamos todos los modelos univariados y vemos que variables son significativas para el modelo

Paso a paso

```{r, echo=FALSE, warning=FALSE, results='hide'}
library(MASS)
# Modelo completo
cerundolo_modelo$fran_win1 = ifelse(cerundolo_modelo$fran_win == "Ganó",1,0)
cerundolo_modelo = subset(cerundolo_modelo, select = -c(fran_win))

modelo_completo <- glm(fran_win1 ~ ., data = cerundolo_modelo, family = binomial(link = "logit"))

# Selección de variables paso a paso basada en AIC
modelo_seleccionado <- step(modelo_completo, direction = "backward")
```

Luego de una larga y detallada selección de modelo, se retienen las siguientes variables: Edad del oponente, porcentaje de puntos ganados con el primer servicio, porcentaje de puntos ganados del rival con el primer servicio, porcentaje de puntos ganados por el rival con el segundo servicio, porcentaje de puntos de break point ganados por Fran y el porcentaje de puntos de break point ganados por el rival.

```{r, echo=FALSE, warning=FALSE, results='hide'}
modelo_final = glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo,family = binomial(link="logit"))

summary(modelo_final)


# Test de Hosmer-Lemeshow usando hltest de glmtoolbox
hltest(modelo_final)

#El modelo ajusta

```

## Adecuación de la función de enlace

### Test de hipótesis

```{r, echo=FALSE, warning=FALSE, results='hide'}

pred.logit<-predict(modelo_final)
cerundolo_modelo$pred.2.logit<-pred.logit*pred.logit

modelo_logit.2 <- glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins+ pred.2.logit, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_final, modelo_logit.2, test="LRT")


```

Parece ser adecuada la funcion de enlace

## Análisis de residuos

#### Gráfico de proporciones observadas vs proporciones estimadas bajo modelo logit

```{r}
### Gráfico de residuos cuantil vs. probabilidades estimadas (ajuste logit)
ggplot(cerundolo_modelo, aes(y = fran_win, x = fitted(modelo_final))) + 
  geom_point(fill = "orange", shape = 21, size = 3) +
  labs(title = "Gráfico de proporciones observadas vs. \nproporciones estimadas", x = "Proporciones estimadas", y = "Proporciones observadas") +
  theme_minimal()
```

### Evaluación de la componente sistemática

```{r, fig.width = 4*1.33*2}
# Residuos cuantil
rQ.final <- qresid(modelo_final)

### Gráfico de residuos cuantil vs. probabilidades estimadas (ajuste cloglog)
G1 <- ggplot(cerundolo_modelo, aes(y = rQ.final, x = fitted(modelo_final))) + 
  geom_point(fill = "orange", shape = 21, size = 3) +
  geom_hline(yintercept = 0) + ylim(-3, 3) + 
  geom_hline(yintercept = -3, linetype = "dashed") + 
  geom_hline(yintercept =  3, linetype = "dashed") +
  labs(title = "Gráfico de residuos cuantil vs. las probabilidades estimadas", x = expression(hat(pi)), y = "Residuos cuantil") +
  theme_minimal()

### Gráfico de residuos cuantil vs. la media estimada (ajuste cloglog)
G2 <- ggplot(datos_beetles, aes(y = rQ.cloglog, x = mu_cloglog)) + 
  geom_point(fill = "orange", shape = 21, size = 3) +
  geom_hline(yintercept = 0) + ylim(-3, 3) + 
  geom_hline(yintercept = -3, linetype = "dashed") + 
  geom_hline(yintercept =  3, linetype = "dashed") +
  labs(title = "Gráfico de residuos cuantil vs. las medias estimadas", x = expression(hat(mu)), y = "Residuos cuantil") +
  theme_minimal()

grid.arrange(G1, G2, ncol = 2)
```

### Evaluación de la componente aleatoria

Mediante un gráfico QQ puede evaluarse si la distribución supuesta es adecuada. la distribucion de la variable latente?

```{r, fig.width = 4*1.33*2}
# Gráfico QQ
G2 <- ggplot(cerundolo_modelo, aes(sample = rQ.final)) +
  stat_qq(distribution = qnorm, fill = "orange", shape = 21, size = 3) +
  stat_qq_line() +
  labs(title = "Gráfico probabilístico normal con residuos cuantil",  x = "Cuantiles teóricos", y = "Cuantiles de los residuos cuantil") +
  theme_minimal()

G2
```

## Evaluación de Linealidad

```{r, echo=FALSE, warning=FALSE, results='hide'}

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat0= cut(opp_age, breaks = c(0, 23, 26, 28, 31, Inf)),
         ord0= cut(opp_age, breaks = c(0, 23, 26, 28, 31, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ cat0 + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ ord0 + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal


cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat1= cut(pct_fran_1stWon, breaks = c(0, 0.59, 0.65, 0.693, 0.75, Inf)),
         ord1= cut(pct_fran_1stWon, breaks = c(0, 0.59, 0.65, 0.693, 0.75, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + cat1 + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + ord1 + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat2= cut(pct_opp_1stWon, breaks = c(0, 0.6, 0.65, 0.7, 0.75, Inf)),
         ord2= cut(pct_opp_1stWon, breaks = c(0, 0.6, 0.65, 0.7, 0.75, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + pct_fran_1stWon + cat2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + pct_fran_1stWon + ord2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#Rechazo Ho) el efecto no es lineal, uso la variable con dummies

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat3= cut(pct_fran_2ndWon, breaks = c(0, 0.4, 0.47, 0.52, 0.59, Inf)),
         ord3= cut(pct_fran_2ndWon, breaks = c(0, 0.4, 0.47, 0.52, 0.59, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + cat3 + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + ord3 + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat4= cut(pct_opp_2ndWon, breaks = c(0, 0.4, 0.45, 0.52, 0.59, Inf)),
         ord4= cut(pct_opp_2ndWon, breaks = c(0, 0.4, 0.45, 0.52, 0.59, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + cat4 + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    ord4 + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat5= cut(pct_fran_bp_wins, breaks = c(0, 0.275, 0.375, 0.47, 0.64, Inf)),
         ord5= cut(pct_fran_bp_wins, breaks = c(0, 0.275, 0.375, 0.47, 0.64, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon +
    pct_opp_2ndWon + cat5 + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + ord5 + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat6= cut(pct_opp_bp_wins, breaks = c(0, 0.275, 0.375, 0.5, 0.6, Inf)),
         ord6= cut(pct_opp_bp_wins, breaks = c(0, 0.275, 0.375, 0.5, 0.6, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon +
    pct_opp_2ndWon + pct_fran_bp_wins + cat6, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + ord6, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

```

El modelo final resulta

```{r}
modelo_final = glm(fran_win ~ pct_fran_1stWon + cat2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

summary(modelo_final)
```
